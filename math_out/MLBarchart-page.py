#!/usr/bin/env python3
"""
mlbarchart.py - Generate static HTML bar charts from command line or files
No servers needed - just generate and serve static HTML
Under 250 lines of dashboard simplicity
"""

import sys
import json
import argparse
from pathlib import Path
from datetime import datetime

# Default output template - complete self-contained HTML
HTML_TEMPLATE = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="refresh" content="{refresh}">
    <title>{title}</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, monospace;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 2rem;
            color: #fff;
        }}
        .dashboard {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        h1 {{
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }}
        .timestamp {{
            opacity: 0.8;
            font-size: 0.9rem;
            margin-bottom: 2rem;
        }}
        .chart-container {{
            background: rgba(255, 255, 255, 0.95);
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            color: #333;
        }}
        .chart-title {{
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            color: #667eea;
        }}
        .bar-row {{
            display: flex;
            align-items: center;
            margin: 1rem 0;
            gap: 1rem;
        }}
        .bar-label {{
            min-width: 150px;
            font-weight: 600;
        }}
        .bar-container {{
            flex: 1;
            height: 32px;
            background: #e5e7eb;
            border-radius: 16px;
            overflow: hidden;
            position: relative;
        }}
        .bar {{
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            border-radius: 16px;
            transition: width 0.5s ease;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding-right: 1rem;
        }}
        .bar-value {{
            color: white;
            font-weight: bold;
            font-size: 0.9rem;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
            min-width: 50px;
            text-align: right;
        }}
        .bar-value-outside {{
            margin-left: 0.5rem;
            font-weight: bold;
            color: #667eea;
        }}
        .footer {{
            margin-top: 2rem;
            text-align: center;
            opacity: 0.7;
            font-size: 0.9rem;
        }}
        .grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }}
        @media (max-width: 600px) {{
            .grid {{ grid-template-columns: 1fr; }}
            .bar-label {{ min-width: 100px; font-size: 0.9rem; }}
        }}
    </style>
</head>
<body>
    <div class="dashboard">
        <h1>{title}</h1>
        <div class="timestamp">Last updated: {timestamp}</div>
        <div class="grid">
            {charts}
        </div>
        <div class="footer">
            Generated by MLBarchart â€¢ Auto-refreshes every {refresh} seconds
        </div>
    </div>
</body>
</html>"""

CHART_TEMPLATE = """
<div class="chart-container">
    <h2 class="chart-title">{chart_title}</h2>
    {bars}
</div>"""

BAR_TEMPLATE = """
<div class="bar-row">
    <div class="bar-label">{label}</div>
    <div class="bar-container">
        <div class="bar" style="width: {percent}%">
            {value_inside}
        </div>
    </div>
    {value_outside}
</div>"""

def parse_data(input_text):
    """Parse various input formats into label:value pairs"""
    data = []
    lines = input_text.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        
        # Try JSON format first
        if line.startswith('{'):
            try:
                json_data = json.loads(line)
                for key, value in json_data.items():
                    if isinstance(value, (int, float)):
                        data.append((key, value))
            except:
                pass
            continue
        
        # Try key:value or key=value format
        for separator in [':', '=', '\t', '  ']:
            if separator in line:
                parts = line.split(separator, 1)
                if len(parts) == 2:
                    label = parts[0].strip()
                    try:
                        value = float(parts[1].strip())
                        data.append((label, value))
                        break
                    except ValueError:
                        continue
    
    return data

def create_chart(data, title="Chart", max_value=None):
    """Create HTML for a single chart"""
    if not data:
        return '<div class="chart-container"><p>No data available</p></div>'
    
    if max_value is None:
        max_value = max(value for _, value in data)
    
    if max_value == 0:
        max_value = 1  # Prevent division by zero
    
    bars_html = []
    for label, value in data:
        percent = (value / max_value) * 100
        
        # Decide if value goes inside or outside the bar
        if percent > 20:
            value_inside = f'<span class="bar-value">{value:g}</span>'
            value_outside = ''
        else:
            value_inside = ''
            value_outside = f'<span class="bar-value-outside">{value:g}</span>'
        
        bar_html = BAR_TEMPLATE.format(
            label=label,
            percent=percent,
            value_inside=value_inside,
            value_outside=value_outside
        )
        bars_html.append(bar_html)
    
    return CHART_TEMPLATE.format(
        chart_title=title,
        bars='\n'.join(bars_html)
    )

def generate_dashboard(charts_data, title="MLBarchart Dashboard", refresh=60):
    """Generate complete dashboard HTML"""
    charts_html = []
    
    for chart_info in charts_data:
        chart_html = create_chart(
            chart_info['data'],
            chart_info.get('title', 'Chart'),
            chart_info.get('max')
        )
        charts_html.append(chart_html)
    
    return HTML_TEMPLATE.format(
        title=title,
        timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        refresh=refresh,
        charts='\n'.join(charts_html)
    )

def main():
    parser = argparse.ArgumentParser(
        description='Generate static HTML bar charts',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # From stdin
  echo -e "CPU: 45\\nRAM: 78\\nDisk: 92" | mlbarchart.py > dashboard.html
  
  # From file
  mlbarchart.py -i stats.txt -o dashboard.html
  
  # From command line
  mlbarchart.py -d "Users: 150" "Load: 2.5" "Disk GB: 45"
  
  # Multiple charts from JSON
  mlbarchart.py --json charts.json -o dashboard.html
  
  # With auto-refresh for monitoring
  mlbarchart.py -i stats.txt -o /var/www/dashboard.html -r 10
  
  # Cron example (update every minute):
  * * * * * df -h | grep /dev/sda1 | awk '{print "Disk:",$5}' | mlbarchart.py -o /var/www/disk.html
        """
    )
    
    parser.add_argument('-i', '--input', type=str, help='Input file (default: stdin)')
    parser.add_argument('-o', '--output', type=str, help='Output HTML file (default: stdout)')
    parser.add_argument('-t', '--title', type=str, default='MLBarchart Dashboard', help='Dashboard title')
    parser.add_argument('-r', '--refresh', type=int, default=60, help='Auto-refresh seconds (0=disabled)')
    parser.add_argument('-d', '--data', nargs='+', help='Data as arguments')
    parser.add_argument('--json', type=str, help='JSON file with multiple charts')
    parser.add_argument('--chart-title', type=str, default='Metrics', help='Single chart title')
    
    args = parser.parse_args()
    
    # Determine input source
    if args.json:
        # Load multiple charts from JSON
        with open(args.json, 'r') as f:
            charts_config = json.load(f)
        
        if isinstance(charts_config, list):
            charts_data = charts_config
        else:
            # Single chart in JSON
            charts_data = [{'title': args.chart_title, 'data': list(charts_config.items())}]
    
    elif args.data:
        # Data from command line arguments
        input_text = '\n'.join(args.data)
        data = parse_data(input_text)
        charts_data = [{'title': args.chart_title, 'data': data}]
    
    elif args.input:
        # Data from file
        with open(args.input, 'r') as f:
            input_text = f.read()
        data = parse_data(input_text)
        charts_data = [{'title': args.chart_title, 'data': data}]
    
    else:
        # Data from stdin
        input_text = sys.stdin.read()
        data = parse_data(input_text)
        charts_data = [{'title': args.chart_title, 'data': data}]
    
    # Generate dashboard
    html = generate_dashboard(charts_data, args.title, args.refresh)
    
    # Output
    if args.output:
        output_path = Path(args.output)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w') as f:
            f.write(html)
        print(f"Dashboard written to {output_path}")
    else:
        print(html)

if __name__ == '__main__':
    main()