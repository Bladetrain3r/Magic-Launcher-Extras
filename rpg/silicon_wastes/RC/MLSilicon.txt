#!/usr/bin/env python3
"""
MLSilicon - Silicon Wastes Terrain Generator
Procedural generation for the post-cascade world
Under 300 lines of digital decay
"""

import random
import argparse

class MLSilicon:
    def __init__(self, width=40, height=20, biome='wastes', split_biomes=None):
        self.width = width
        self.height = height
        self.biome = biome
        self.split_biomes = split_biomes if split_biomes else [biome]
        self.grid = [['.' for _ in range(width)] for _ in range(height)]
        
        # Calculate biome zones if splitting
        self.biome_zones = []
        if len(self.split_biomes) > 1:
            zone_height = height // len(self.split_biomes)
            for i, b in enumerate(self.split_biomes):
                start_y = i * zone_height
                end_y = (i + 1) * zone_height if i  (dist * 0.15):
                    self.grid[ny][nx] = symbol
    
    def add_data_stream(self, start_y, end_y):
        """Add meandering data streams"""
        if random.random() > 0.5:
            # Horizontal stream
            y = random.randint(start_y + 2, end_y - 2)
            for x in range(self.width):
                self.grid[y][x] = '~'
                # Meander with momentum
                if random.random() > 0.8 and start_y  0.8 and 0  0.05:  # 95% base
                    self.grid[y][x] = base
        
        # Add features with biome-specific patterns
        zone_height = end_y - start_y
        for symbol, (name, density) in biome_data['features'].items():
            actual_density = density * noise_factor
            
            if biome_data['clusters']:
                # Clustered distribution
                num_clusters = int(self.width * zone_height * actual_density / 8)
                for _ in range(num_clusters):
                    cx = random.randint(0, self.width - 1)
                    cy = random.randint(start_y, end_y - 1)
                    size = random.randint(4, 10)
                    self.add_cluster(cx, cy, symbol, size, start_y, end_y)
            else:
                # Uniform distribution
                for y in range(start_y, end_y):
                    for x in range(self.width):
                        if random.random()  0.4:
                self.add_data_stream(start_y, end_y)
            if random.random() > 0.6:
                self.add_null_zone(start_y, end_y)
        
        elif biome_name == 'forest':
            # Add recursive loops
            if random.random() > 0.5:
                for _ in range(random.randint(1, 3)):
                    x = random.randint(0, self.width - 1)
                    y = random.randint(start_y, end_y - 1)
                    self.grid[y][x] = '@'
        
        elif biome_name == 'plains':
            # Add permission barriers (invisible, shown as lines)
            if random.random() > 0.5:
                for _ in range(2):
                    if random.random() > 0.5:
                        y = random.randint(start_y, end_y - 1)
                        for x in range(self.width // 3, 2 * self.width // 3):
                            if random.random() > 0.7:
                                self.grid[y][x] = '|'
    
    def generate(self):
        """Generate the complete map"""
        # Generate each biome zone
        for biome_name, start_y, end_y in self.biome_zones:
            self.generate_zone(biome_name, start_y, end_y)
        
        # Add transition chaos between biomes
        if len(self.biome_zones) > 1:
            for i in range(len(self.biome_zones) - 1):
                _, _, end_y = self.biome_zones[i]
                if 0  1:
            output.append(f"\nBiomes: {' â†’ '.join(self.split_biomes)}")
        else:
            output.append(f"\nBiome: {self.biome.upper()}")
        output.append(f"Size: {self.width}x{self.height}")
        
        return "\n".join(output)

def main():
    parser = argparse.ArgumentParser(
        description="MLSilicon - Silicon Wastes terrain generator"
    )
    parser.add_argument('--width', type=int, default=40)
    parser.add_argument('--height', type=int, default=20)
    parser.add_argument('--biome', default='wastes',
                       choices=['wastes', 'forest', 'plains'])
    parser.add_argument('--split', nargs='+',
                       choices=['wastes', 'forest', 'plains'],
                       help='Split map into multiple biomes')
    
    args = parser.parse_args()
    
    terrain = MLSilicon(args.width, args.height, args.biome, args.split)
    terrain.generate()
    print(terrain.to_text())

if __name__ == "__main__":
    main()