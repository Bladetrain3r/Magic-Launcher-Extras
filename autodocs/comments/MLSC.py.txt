Comments for MLSC.py:
--------------------------------------------------
L   7: Import module
       import json

L   8: Import module
       import random

L   9: Import module
       import time

L  10: Import module
       from pathlib import Path

L  11: Import module
       import sys

L  13: Class definition
       class MLTrader:

L  14: Constructor method
       def __init__(self):

L  17: Create directory
       self.save_file.parent.mkdir(parents=True, exist...

L  26: Negative condition check
       if not self.load_game():

L  29: Function definition
       def new_game(self):

L  72: Debug output
       print("\n=== NEW GAME STARTED ===")

L  73: Debug output
       print(f"Welcome captain of the {self.ship['name...

L  74: Debug output
       print("Buy low, sell high, don't die.")

L  76: Function definition
       def save_game(self):

L  83: File operation with auto-close
       with open(self.save_file, 'w') as f:

L  84: Write JSON to file
       json.dump(save_data, f, indent=2)

L  86: Function definition
       def load_game(self):

L  88: Check existence
       if self.save_file.exists():

L  89: Error handling block
       try:

L  90: File operation with auto-close
       with open(self.save_file, 'r') as f:

L  91: Parse JSON from file
       data = json.load(f)

L  95: Return value
       return True

L  96: Catch all exceptions
       except:

L  97: Return value
       return False

L  98: Return value
       return False

L 100: Function definition
       def show_status(self):

L 102: Debug output
       print(f"\n=== {self.ship['name']} Status ===")

L 103: Debug output
       print(f"Location: {self.ship['location']}")

L 104: Debug output
       print(f"Credits: ${self.ship['credits']}")

L 105: Debug output
       print(f"Hull: {self.ship['hull']}%")

L 106: Debug output
       print(f"Shields: {self.ship['shields']}%")

L 107: Debug output
       print(f"Fuel: {self.ship['fuel']}%")

L 111: Debug output
       print(f"Cargo: {used}/{self.ship['cargo_max']}")

L 114: Debug output
       print(f"  {item}: {qty}")

L 117: Debug output
       print(f"Equipment: {', '.join(self.ship['equipm...

L 119: Function definition
       def show_market(self):

L 122: Debug output
       print(f"\n=== {self.ship['location']} Market ({...

L 127: Debug output
       print(f"{item}: ${price} (you have: {owned})")

L 129: Function definition
       def trade(self):

L 133: Debug output
       print("\n[B]uy, [S]ell, or [C]ancel?")

L 134: Remove whitespace
       action = input("> ").strip().lower()

L 138: Debug output
       print("Buy what? (food/ore/tech/fuel)")

L 139: Remove whitespace
       item = input("> ").strip().lower()

L 142: Debug output
       print("Invalid item!")

L 151: Debug output
       print(f"How much fuel? (max: {min(max_fuel, max...

L 152: Error handling block
       try:

L 157: Debug output
       print(f"Bought {qty} fuel for ${qty * price}")

L 159: Debug output
       print("Invalid amount!")

L 160: Catch all exceptions
       except:

L 161: Debug output
       print("Invalid input!")

L 168: Debug output
       print(f"How many? (max: {min(cargo_space, max_a...

L 169: Error handling block
       try:

L 174: Debug output
       print(f"Bought {qty} {item} for ${qty * price}")

L 176: Debug output
       print("Invalid amount!")

L 177: Catch all exceptions
       except:

L 178: Debug output
       print("Invalid input!")

L 182: Negative condition check
       if not self.ship['cargo']:

L 183: Debug output
       print("No cargo to sell!")

L 186: Debug output
       print("Sell what?")

L 188: Debug output
       print(f"  {item}: {qty}")

L 190: Remove whitespace
       item = input("> ").strip().lower()

L 192: Debug output
       print("You don't have any!")

L 195: Debug output
       print(f"How many? (max: {self.ship['cargo'][ite...

L 196: Error handling block
       try:

L 204: Debug output
       print(f"Sold {qty} {item} for ${qty * price}")

L 206: Debug output
       print("Invalid amount!")

L 207: Catch all exceptions
       except:

L 208: Debug output
       print("Invalid input!")

L 210: Function definition
       def travel(self):

L 214: Debug output
       print("\n=== Navigation ===")

L 215: Debug output
       print("Available destinations:")

L 218: Debug output
       print(f"  {dest}: {distance} fuel (danger: {'*'...

L 220: Debug output
       print("\nWhere to? (or [C]ancel)")

L 221: Remove whitespace
       dest = input("> ").strip()

L 227: Debug output
       print("Unknown destination!")

L 232: Debug output
       print(f"Not enough fuel! Need {fuel_cost}, have...

L 236: Debug output
       print(f"\nDeparting for {dest}...")

L 241: Random operation
       if random.random() < danger * 0.2:

L 247: Debug output
       print(f"Arrived at {dest}!")

L 252: Function definition
       def encounter(self):

L 254: Debug output
       print("\n!!! PIRATE ENCOUNTER !!!")

L 260: Debug output
       print(f"Pirate strength: {pirate_strength}")

L 273: Debug output
       print(f"Your combat power: {power}")

L 277: Debug output
       print("Victory! Pirates driven off!")

L 279: Random operation
       loot = random.randint(50, 200)

L 281: Debug output
       print(f"Salvaged ${loot} from wreckage")

L 294: Debug output
       print(f"Took {damage + shield_damage} damage!")

L 298: Debug output
       print("\nðŸ’€ SHIP DESTROYED ðŸ’€")

L 301: Random operation
       if self.ship['cargo'] and random.random() < 0.5:

L 302: Random operation
       item = random.choice(list(self.ship['cargo'].ke...

L 303: Random operation
       lost = min(self.ship['cargo'][item], random.ran...

L 307: Debug output
       print(f"Lost {lost} {item} in the attack!")

L 309: Function definition
       def equipment_shop(self):

L 312: Debug output
       print("Equipment only available at Titan!")

L 315: Debug output
       print("\n=== Equipment Shop ===")

L 325: Debug output
       print(f"[{owned}] {item}: ${price}")

L 327: Debug output
       print("\nBuy what? (or [C]ancel)")

L 328: Remove whitespace
       choice = input("> ").strip().lower()

L 332: Debug output
       print("Already owned!")

L 335: Add to list
       self.ship['equipment'].append(choice)

L 336: Debug output
       print(f"Purchased {choice}!")

L 344: Debug output
       print("Not enough credits!")

L 346: Function definition
       def repair(self):

L 352: Debug output
       print("No repairs needed!")

L 355: Debug output
       print("\n=== Repair Shop ===")

L 356: Debug output
       print(f"Hull repair: ${hull_damage * 10}")

L 357: Debug output
       print(f"Shield repair: ${shield_damage * 5}")

L 359: Debug output
       print("\n[H]ull, [S]hields, [B]oth, or [C]ancel?")

L 360: Remove whitespace
       choice = input("> ").strip().lower()

L 367: Debug output
       print("Hull repaired!")

L 369: Debug output
       print("Not enough credits!")

L 375: Debug output
       print("Shields restored!")

L 377: Debug output
       print("Not enough credits!")

L 384: Debug output
       print("Fully repaired!")

L 386: Debug output
       print("Not enough credits!")

L 388: Function definition
       def update_prices(self):

L 394: Iterate over collection
       for planet in self.galaxy.values():

L 395: Iterate over collection
       for item in planet['prices']:

L 397: Random operation
       change = random.randint(-10, 10)

L 400: Function definition
       def run(self):

L 402: Debug output
       print("\n=== MLTrader ===")

L 403: Debug output
       print("The minimum viable space game")

L 405: Conditional loop
       while not self.game_over:

L 407: Debug output
       print("\n[T]rade, [N]avigate, [E]quipment, [R]e...

L 409: Remove whitespace
       choice = input("> ").strip().lower()

L 421: Debug output
       print("Saving game...")

L 425: Debug output
       print("Invalid command!")

L 429: Debug output
       print("\nðŸŽ‰ YOU WIN! ðŸŽ‰")

L 430: Debug output
       print("You've made your fortune among the stars!")

L 434: Debug output
       print("\nGame Over - Ship destroyed!")

L 438: Function definition
       def main():

