Comments for MLSticky.py:
--------------------------------------------------
L   7: Import module
       import sys

L   8: Import module
       import os

L   9: Import module
       from pathlib import Path

L  10: Import module
       from datetime import datetime

L  11: Import module
       import argparse

L  12: Import module
       import re

L  15: Error handling block
       try:

L  16: Import module
       import pwd

L  18: Catch specific exception
       except ImportError:

L  23: Path object creation
       SYSTEM_NOTE = Path('/var/log/mlnotes/system.txt')

L  25: Function definition
       def ensure_files():

L  28: Create directory
       USER_NOTE.parent.mkdir(parents=True, exist_ok=T...

L  29: Negative condition check
       if not USER_NOTE.exists():

L  34: Create directory
       SYSTEM_NOTE.parent.mkdir(parents=True, exist_ok...

L  35: Negative condition check
       if not SYSTEM_NOTE.exists():

L  39: Create directory
       SYSTEM_NOTE.parent.mkdir(parents=True, exist_ok...

L  40: Negative condition check
       if not SYSTEM_NOTE.exists():

L  43: Function definition
       def get_username():

L  45: Error handling block
       try:

L  49: Return value
       return sudo_user

L  52: Return value
       return pwd.getpwuid(os.getuid()).pw_name

L  54: Return value
       return os.environ.get('USERNAME', os.environ.ge...

L  55: Catch all exceptions
       except:

L  56: Return value
       return 'unknown'

L  58: Function definition
       def add_note(message, system=False):

L  61: Debug output
       print("Error: System notes require root/admin p...

L  62: Debug output
       print("Try: sudo mlnote -s 'your message'")

L  63: Return value
       return False

L  68: Get current datetime
       timestamp = datetime.now().strftime('%Y-%m-%d %...

L  72: Error handling block
       try:

L  73: File operation with auto-close
       with open(note_file, 'a') as f:

L  77: Debug output
       print(f"{note_type} note added: {message}")

L  78: Return value
       return True

L  79: Catch specific exception
       except PermissionError:

L  80: Debug output
       print(f"Error: Cannot write to {note_file}")

L  81: Return value
       return False

L  82: Catch specific exception
       except Exception as e:

L  83: Debug output
       print(f"Error: {e}")

L  84: Return value
       return False

L  86: Function definition
       def read_notes(lines=10, system=False, all_note...

L  90: Check existence
       if USER_NOTE.exists():

L  91: Add to list
       files.append(('User', USER_NOTE))

L  92: Check existence
       if SYSTEM_NOTE.exists() and os.access(SYSTEM_NO...

L  93: Add to list
       files.append(('System', SYSTEM_NOTE))

L  96: Negative condition check
       if not note_file.exists():

L  97: Debug output
       print(f"No {'system' if system else 'user'} not...

L 102: Negative condition check
       if not note_file.exists():

L 105: Error handling block
       try:

L 106: File operation with auto-close
       with open(note_file, 'r') as f:

L 112: Iterate over collection
       all_lines = [l for l in all_lines if pattern.se...

L 113: Negative condition check
       if not all_lines:

L 115: Debug output
       print(f"\n=== {label} Notes ===")

L 116: Debug output
       print(f"No notes matching '{grep}'")

L 126: Debug output
       print(f"\n=== {label} Notes ===")

L 128: Iterate over collection
       for line in display_lines:

L 129: Debug output
       print(line.rstrip())

L 131: Catch specific exception
       except PermissionError:

L 132: Debug output
       print(f"Error: Cannot read {note_file}")

L 133: Catch specific exception
       except Exception as e:

L 134: Debug output
       print(f"Error reading {note_file}: {e}")

L 136: Function definition
       def stats():

L 138: Debug output
       print("=== MLNote Statistics ===")

L 141: Check existence
       if path.exists() and os.access(path, os.R_OK):

L 142: Error handling block
       try:

L 143: File operation with auto-close
       with open(path, 'r') as f:

L 150: Regex pattern search
       first_match = re.search(r'\[(\d{4}-\d{2}-\d{2})...

L 151: Regex pattern search
       last_match = re.search(r'\[(\d{4}-\d{2}-\d{2})'...

L 160: Debug output
       print(f"\n{name} Notes ({path}):")

L 161: Debug output
       print(f"  Lines: {len(lines)}")

L 162: Debug output
       print(f"  Size: {size:,} bytes")

L 163: Debug output
       print(f"  Range: {date_range}")

L 164: Catch all exceptions
       except:

L 165: Debug output
       print(f"\n{name} Notes: Not accessible")

L 167: Debug output
       print(f"\n{name} Notes: Not found")

L 169: Function definition
       def main():

