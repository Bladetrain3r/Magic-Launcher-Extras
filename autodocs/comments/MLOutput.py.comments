Comments for ./terminal_text/MLOutput.py:
--------------------------------------------------
L   7: Import module
       import tkinter as tk

L   8: Import module
       from tkinter import scrolledtext

L   9: Import module
       import subprocess

L  10: Import module
       import threading

L  11: Import module
       import sys

L  12: Import module
       import re

L  13: Import module
       import os

L  14: Import module
       import shlex

L  27: Class definition
       class MLOutput:

L  28: Constructor method
       def __init__(self, root, command):

L  47: Function definition
       def _create_ui(self):

L 116: Join strings
       self.status = tk.Label(self.root, text=f"Runnin...

L 123: Global error handler
       self.root.bind('<space>', lambda e: self._toggl...

L 126: Function definition
       def _start_process(self):

L 128: Error handling block
       try:

L 149: Catch specific exception
       except Exception as e:

L 153: Function definition
       def _read_stdout(self):

L 155: Error handling block
       try:

L 156: Iterate over collection
       for line in self.process.stdout:

L 157: Get user by ID
       if self.show_stdout.get():

L 159: Catch specific exception
       except Exception as e:

L 165: Function definition
       def _read_stderr(self):

L 167: Error handling block
       try:

L 168: Iterate over collection
       for line in self.process.stderr:

L 169: Get user by ID
       if self.show_stderr.get():

L 171: Catch specific exception
       except Exception as e:

L 175: Function definition
       def _add_line(self, line, stream):

L 178: Add to list
       self.buffer.append((line, stream))

L 182: Get user by ID
       filter_text = self.filter_pattern.get()

L 184: Error handling block
       try:

L 185: Negative condition check
       if not re.search(filter_text, line):

L 187: Catch all exceptions
       except:

L 193: Function definition
       def _append_output(self, line, stream, is_filte...

L 194: Get user by ID
       """Append to output widget (must be called from...

L 195: Error handling block
       try:

L 196: Negative condition check
       self.output.insert('end', line + '\n', stream i...

L 198: Catch specific exception
       except tk.TclError as e:

L 202: Negative condition check
       self.output.insert('end', safe_line + '\n', str...

L 205: Function definition
       def _toggle_pause(self):

L 210: Negative condition check
       if not self.paused and self.buffer:

L 216: Function definition
       def _clear(self):

L 221: Function definition
       def _stop_process(self):

L 223: Null check
       if self.process and self.process.poll() is None:

L 227: Function definition
       def main():

L 230: Import module
       import locale

L 237: Debug output
       print("MLOutput - Terminal output viewer")

L 238: Debug output
       print("Usage: mloutput.py <command>")

L 239: Debug output
       print("Examples:")

L 240: Debug output
       print("  mloutput.py 'ping google.com'")

L 241: Debug output
       print("  mloutput.py 'python script.py'")

L 242: Debug output
       print("  mlquickpage file.txt section | mloutpu...

L 243: Debug output
       print("\nKeyboard shortcuts:")

L 244: Debug output
       print("  Space     - Pause/Resume")

L 245: Debug output
       print("  Ctrl+C    - Stop process")

L 246: Debug output
       print("  Escape    - Quit")

L 247: Exit program
       sys.exit(1)

L 253: Import module
       '''import sys

L 255: Iterate over collection
       for line in sys.stdin:

L 256: Debug output
       print(line, end="")''']

L 259: Split string
       command = shlex.split(' '.join(sys.argv[1:]))

L 264: Error handling block
       try:

