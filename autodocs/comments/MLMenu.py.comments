Comments for ./launch_magically/MLMenu.py:
--------------------------------------------------
L   7: Import module
       import os

L   8: Import module
       import sys

L   9: Import module
       import json

L  10: Import module
       import subprocess

L  11: Import module
       from pathlib import Path

L  14: Error handling block
       try:

L  15: Import module
       import msvcrt  # Windows

L  16: Function definition
       def get_key():

L  17: Return value
       return msvcrt.getch().decode('utf-8', errors='i...

L  18: Catch specific exception
       except ImportError:

L  19: Import module
       import termios, tty  # Unix/Linux

L  20: Function definition
       def get_key():

L  23: Error handling block
       try:

L  28: Return value
       return key.lower()

L  31: Class definition
       class Colors:

L  38: Decorator applied
       @staticmethod

L  39: Function definition
       def clear():

L  42: Class definition
       class MLMenu:

L  43: Constructor method
       def __init__(self):

L  50: Function definition
       def load_shortcuts(self):

L  52: Check existence
       if self.config_file.exists():

L  53: Error handling block
       try:

L  54: File operation with auto-close
       with open(self.config_file, 'r', encoding='utf-...

L  55: Parse JSON from file
       data = json.load(f)

L  58: Catch specific exception
       except Exception as e:

L  59: Debug output
       print(f"Error loading config: {e}")

L  64: Function definition
       def _convert_shortcuts(self, data):

L  68: Get user by ID
       if item.get('type') == 'folder' and 'items' in ...

L  75: Return value
       return result

L  77: Function definition
       def _get_demo_shortcuts(self):

L  79: Return value
       return {

L  85: Get user by ID
       "path": "cmd" if os.name == 'nt' else os.enviro...

L  99: Function definition
       def get_current_items(self):

L 102: Iterate over collection
       for folder in self.current_path:

L 104: Return value
       return current

L 106: Function definition
       def navigate_to(self, index):

L 114: Get user by ID
       if item.get("type") == "folder":

L 115: Add to list
       self.current_path.append(name)

L 117: Return value
       return True

L 120: Return value
       return self.launch_item(item, wait=False)

L 121: Return value
       return False

L 123: Function definition
       def draw_menu(self):

L 128: Debug output
       print(f"{Colors.BLUE}{Colors.WHITE}")

L 129: Debug output
       print("╔══════════════════════════════════════╗")

L 130: Debug output
       print("║          ML-MENU v1.0                ║")

L 131: Debug output
       print("╠══════════════════════════════════════╣")

L 135: Join strings
       path_str = " > ".join(self.current_path)

L 138: Debug output
       print(f"║ {path_str:<36} ║")

L 139: Debug output
       print("╠══════════════════════════════════════╣")

L 153: Get user by ID
       if item.get("type") == "folder":

L 155: Debug output
       print(f"║ {Colors.YELLOW}[{i+1}]{Colors.WHITE} ...

L 158: Iterate N times
       for i in range(len(item_list), 9):

L 159: Debug output
       print(f"║ {' '*36} ║")

L 162: Debug output
       print("╠══════════════════════════════════════╣")

L 165: Debug output
       print(f"║ [Q]uit [B]ack [H]ome {page_info:>14} ...

L 166: Debug output
       print("║ [<,>] Page  [R]efresh                ║")

L 168: Debug output
       print("║ [Q]uit  [B]ack  [H]ome  [R]efresh    ║")

L 169: Debug output
       print(f"╚══════════════════════════════════════...

L 170: Debug output
       print("\nSelect option: ", end='', flush=True)

L 172: Function definition
       def launch_item(self, item, wait=True):

L 177: Debug output
       print(f"Launching {item.get('path', 'unknown')}...

L 179: Error handling block
       try:

L 180: Get user by ID
       path = item.get('path', '')

L 181: Get user by ID
       args = item.get('args', '')

L 184: Path operation
       path = os.path.expanduser(path)

L 191: Execute external command
       subprocess.run(cmd, shell=True)

L 194: Import module
       import shlex

L 195: Split string
       cmd = [path] + shlex.split(args)

L 196: Execute external command
       subprocess.run(cmd)

L 198: Execute external command
       subprocess.run([path])

L 201: Debug output
       print("\nPress any key to continue...")

L 204: Return value
       return True

L 206: Catch specific exception
       except FileNotFoundError:

L 207: Debug output
       print(f"Error: Command '{path}' not found")

L 209: Debug output
       print("\nPress any key to continue...")

L 211: Return value
       return False

L 212: Catch specific exception
       except Exception as e:

L 213: Debug output
       print(f"Error launching: {e}")

L 215: Debug output
       print("\nPress any key to continue...")

L 217: Return value
       return False

L 219: Function definition
       def run_commands(self, commands):

L 221: Iterate over collection
       for cmd in commands.split():

L 224: Debug output
       print(f"Executing: {cmd}")

L 225: Negative condition check
       if not self.navigate_to(idx):

L 226: Debug output
       print(f"Failed at command: {cmd}")

L 227: Return value
       return False

L 229: Debug output
       print(f"Skipping non-numeric: {cmd}")

L 231: Debug output
       print("Command sequence complete")

L 232: Return value
       return True

L 234: Function definition
       def run(self):

L 236: Infinite loop
       while True:

L 242: Debug output
       print("Thanks for using ML-MENU!")

L 269: Get user by ID
       if item.get("type") == "folder":

L 270: Add to list
       self.current_path.append(name)

L 275: Function definition
       def main():

L 284: Debug output
       print("MLMenu - Terminal launcher")

L 285: Debug output
       print("Usage: mlmenu [-c 'commands']")

L 286: Debug output
       print("  -c '1 2 3'  Execute commands in sequen...

L 287: Debug output
       print("  -h          Show this help")

L 291: Error handling block
       try:

L 294: Catch specific exception
       except KeyboardInterrupt:

L 295: Debug output
       print("\n\nInterrupted!")

L 296: Catch specific exception
       except Exception as e:

L 297: Debug output
       print(f"\nError: {e}")

L 298: Import module
       import traceback

L 302: Debug output
       print(Colors.RESET)

