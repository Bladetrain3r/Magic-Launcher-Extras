Comments for ./code_health/MLCommentsv2.py:
--------------------------------------------------
L   7: Import module
       import json

L   8: Import module
       import re

L   9: Import module
       import sys

L  10: Import module
       from pathlib import Path

L  11: Import module
       import argparse

L  13: Class definition
       class MLComment:

L  15: Class definition
       Core class for the MLComment tool.

L  18: Constructor method
       def __init__(self):

L  21: Create directory
       self.config_dir.mkdir(parents=True, exist_ok=True)

L  53: Function definition
       def get_comment_style(self, filepath):

L  55: Path object creation
       file_ext = Path(filepath).suffix.lower()

L  56: Return value
       return self.comment_styles.get(file_ext, '#')

L  58: Function definition
       def load_kb(self):

L  60: Check existence
       if self.kb_file.exists():

L  61: File operation with auto-close
       with open(self.kb_file, 'r') as f:

L  62: Parse JSON from file
       return json.load(f)

L  93: Return value
       return default_kb

L  95: Function definition
       def save_kb(self, kb=None):

L  97: Null check
       if kb is None:

L  99: File operation with auto-close
       with open(self.kb_file, 'w') as f:

L 100: Write JSON to file
       json.dump(kb, f, indent=2)

L 102: Function definition
       def add_pattern(self, pattern, comment, context...

L 111: Debug output
       print(f"Added pattern: {pattern} -> {comment} (...

L 113: Function definition
       def find_comment(self, line, context=None):

L 115: Remove whitespace
       line_stripped = line.strip()

L 118: Negative condition check
       if not line_stripped:

L 119: Explicit null return
       return None

L 122: Get user by ID
       if context and context in self.kb.get("context"...

L 124: Regex pattern search
       if re.search(pattern, line_stripped):

L 125: Return value
       return comment[:100]  # Cap comment length

L 129: Regex pattern search
       if re.search(pattern, line_stripped):

L 130: Return value
       return comment[:100]  # Cap comment length

L 132: Explicit null return
       return None

L 134: Function definition
       def learn_from_file(self, filepath):

L 136: Error handling block
       try:

L 137: File operation with auto-close
       with open(filepath, 'r', encoding='utf-8') as f:

L 139: Catch specific exception
       except Exception as e:

L 140: Debug output
       print(f"Error reading file: {e}")

L 153: Iterate over collection
       for line in lines:

L 155: Remove whitespace
       if line.strip().startswith(comment_char):

L 159: Regex pattern search
       match = re.search(comment_regex, line)

L 162: Remove whitespace
       code_part = match.group(1).strip()

L 163: Remove whitespace
       comment_part = match.group(2).strip()

L 175: Regex pattern search
       func_match = re.search(r'(\w+)\s*\(', code_part)

L 188: Debug output
       print(f"Learned {learned} new patterns from {fi...

L 190: Debug output
       print(f"No new patterns found in {filepath}")

L 192: Function definition
       def comment_file(self, filepath, context=None):

L 193: Return value
       """Add comments to a file and return the new co...

L 194: Error handling block
       try:

L 195: File operation with auto-close
       with open(filepath, 'r', encoding='utf-8') as f:

L 197: Catch specific exception
       except Exception as e:

L 198: Debug output
       print(f"Error reading file: {e}")

L 199: Explicit null return
       return None

L 206: Iterate over collection
       for line in lines:

L 211: Split string
       parts = line.split(comment_char)

L 214: Add to list
       output_lines.append(line)

L 220: Remove whitespace
       if comment and line.strip():

L 225: Remove whitespace
       if len(line_content.strip()) < 50:

L 226: Remove whitespace
       padding = ' ' * (50 - len(line_content.strip())...

L 231: Add to list
       output_lines.append(commented_line)

L 233: Add to list
       output_lines.append(line)

L 235: Return value
       return ''.join(output_lines)

L 237: Function definition
       def save_to_file(self, filepath, content):

L 239: Error handling block
       try:

L 240: File operation with auto-close
       with open(filepath, 'w', encoding='utf-8') as f:

L 242: Debug output
       print(f"Successfully saved commented file to {f...

L 243: Catch specific exception
       except Exception as e:

L 244: Debug output
       print(f"Error saving file: {e}")

L 246: Function definition
       def comment_file_external(self, filepath, conte...

L 248: Error handling block
       try:

L 249: File operation with auto-close
       with open(filepath, 'r', encoding='utf-8') as f:

L 251: Catch specific exception
       except Exception as e:

L 252: Debug output
       print(f"Error reading file: {e}")

L 253: Explicit null return
       return None

L 259: Negative condition check
       if not line.strip():

L 265: Remove whitespace
       code_snippet = line.strip()

L 269: Add to list
       comments.append({

L 275: Return value
       return comments

L 277: Function definition
       def main():

L 305: Debug output
       print(json.dumps(commenter.kb, indent=2))

L 313: Debug output
       print(json.dumps(comments, indent=2))

L 315: Debug output
       print(f"# Code Comments for {args.file}\n")

L 316: Iterate over collection
       for c in comments:

L 317: Debug output
       print(f"**Line {c['line']}**: `{c['code']}`")

L 318: Debug output
       print(f"- {c['comment']}\n")

L 320: Debug output
       print(f"Comments for {args.file}:")

L 321: Debug output
       print("-" * 50)

L 322: Iterate over collection
       for c in comments:

L 323: Debug output
       print(f"L{c['line']:4d}: {c['comment']}")

L 324: Debug output
       print(f"       {c['code']}\n")

L 332: Debug output
       print(result)

