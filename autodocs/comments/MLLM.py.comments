Comments for ./text_processing/MLLM.py:
--------------------------------------------------
L   7: Import module
       import sys

L   8: Import module
       import json

L   9: Import module
       import base64

L  10: Import module
       import os

L  11: Import module
       from pathlib import Path

L  14: Error handling block
       try:

L  15: Import module
       import pyperclip

L  17: Catch specific exception
       except ImportError:

L  20: Error handling block
       try:

L  21: Import module
       from PIL import Image

L  23: Catch specific exception
       except ImportError:

L  26: Class definition
       class MLChat:

L  27: Constructor method
       def __init__(self):

L  30: Get user by ID
       self.base_url = os.environ.get('MLCHAT_URL', se...

L  31: Get user by ID
       self.model = os.environ.get('MLCHAT_MODEL', sel...

L  33: Function definition
       def load_config(self):

L  36: Check existence
       if config_file.exists():

L  37: Error handling block
       try:

L  38: Parse JSON from string
       return json.loads(config_file.read_text())

L  39: Catch all exceptions
       except:

L  40: Return value
       return {}

L  41: Return value
       return {}

L  43: Function definition
       def send_to_ai(self, content, is_image=False, p...

L  64: Get user by ID
       if os.environ.get('MLCHAT_DEBUG'):

L  65: Debug output
       print(f"Sending to {self.base_url}/chat/complet...

L  66: Debug output
       print(f"Model: {self.model}", file=sys.stderr)

L  67: Debug output
       print(f"Message preview: {str(messages[0])[:200...

L  70: Import module
       import requests

L  71: Error handling block
       try:

L  72: Create user endpoint
       response = requests.post(

L  80: Return user data
       data = response.json()

L  83: Debug output
       print(data['choices'][0]['message']['content'])...

L  85: Debug output
       print(f"API Error: {data['error']}", file=sys.s...

L  87: Debug output
       print(f"Unexpected response format: {json.dumps...

L  89: Debug output
       print(f"Error: {response.status_code}", file=sy...

L  90: Error handling block
       try:

L  91: Return user data
       error_data = response.json()

L  92: Debug output
       print(f"Response: {json.dumps(error_data, inden...

L  93: Catch all exceptions
       except:

L  94: Debug output
       print(f"Response: {response.text}", file=sys.st...

L  96: Catch specific exception
       except requests.exceptions.ConnectionError:

L  97: Debug output
       print(f"Failed to connect to {self.base_url}", ...

L  98: Debug output
       print("Check that your local LLM server is runn...

L  99: Exit program
       sys.exit(1)  # Exit with error code

L 100: Catch specific exception
       except requests.exceptions.Timeout:

L 101: Debug output
       print("Request timed out after 30 seconds", fil...

L 102: Exit program
       sys.exit(1)

L 103: Catch specific exception
       except Exception as e:

L 104: Debug output
       print(f"Request failed: {e}", file=sys.stderr)

L 105: Exit program
       sys.exit(1)

L 107: Function definition
       def handle_file(self, filepath, prompt=None):

L 109: Path object creation
       path = Path(filepath)

L 110: Negative condition check
       if not path.exists():

L 111: Debug output
       print(f"File not found: {filepath}")

L 117: Error handling block
       try:

L 120: Import module
       import io

L 125: Catch specific exception
       except Exception as e:

L 126: Debug output
       print(f"Error processing image: {e}")

L 129: Error handling block
       try:

L 132: Negative condition check
       if not prompt:

L 135: Catch specific exception
       except Exception as e:

L 136: Debug output
       print(f"Error reading file: {e}")

L 138: Function definition
       def handle_paste(self, prompt=None):

L 140: Negative condition check
       if not HAS_CLIPBOARD:

L 141: Debug output
       print("Install pyperclip for clipboard support:...

L 144: Error handling block
       try:

L 147: Negative condition check
       if not prompt:

L 151: Debug output
       print("Clipboard is empty")

L 152: Catch specific exception
       except Exception as e:

L 153: Debug output
       print(f"Clipboard error: {e}")

L 155: Function definition
       def run(self):

L 157: Debug output
       print("MLChat - Local LLM Chat")

L 158: Debug output
       print(f"Using: {self.base_url} with model {self...

L 159: Debug output
       print("Commands: /file <path> [prompt], /paste ...

L 161: Infinite loop
       while True:

L 162: Error handling block
       try:

L 163: Remove whitespace
       user_input = input("> ").strip()

L 169: Split string
       parts = user_input[6:].strip().split(' ', 1)

L 175: Remove whitespace
       prompt = user_input[6:].strip() if len(user_inp...

L 178: Debug output
       print("Unknown command. Use /file, /paste, or /...

L 183: Catch specific exception
       except KeyboardInterrupt:

L 184: Debug output
       print("\nBye!")

L 186: Catch specific exception
       except Exception as e:

L 187: Debug output
       print(f"Error: {e}")

L 189: Function definition
       def show_help():

L 191: Debug output
       print("""MLChat - Local LLM Chat Client

L 235: Function definition
       def main():

L 245: Join strings
       prompt = ' '.join(sys.argv[2:])

L 247: Negative condition check
       if not sys.stdin.isatty():

L 248: Remove whitespace
       content = sys.stdin.read().strip()

L 261: Debug output
       print("Error: -c requires a prompt")

L 262: Negative condition check
       elif not sys.stdin.isatty():

L 264: Remove whitespace
       content = sys.stdin.read().strip()

L 270: Debug output
       print("No input received")

